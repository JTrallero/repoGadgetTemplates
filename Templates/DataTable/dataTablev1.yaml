createdAt: 1728894469000
updatedAt: 1729508655000
id: 328324ac-8a06-11ef-b4fe-f2ff555a096d
identification: DATATABLE2
user: packetworx
description: DATATABLE
type: vueJSODS
template: !html |-
    <!-- DATA TABLE ONESAIT PLATFORM COMPONENT TEMPLATE -->
    <div class="gadget-app-table" style="padding:12px; width:100%; height:100%" v-if="table">
       <!-- TABLE TOOLBAR -->
       <div class="table-toolBar" v-if="toolBar">
          <div class="table-toolBar_header">
             <h2 class="table-title" v-if="title">({{(totalFiltered > 0 && totalFiltered < totalRecords )?  totalFiltered + ' / ' + totalRecords : totalRecords}}) {{ title }} </h2>
          </div>
          <div class="table-toolBar_actions">
             <div class="filters">
                <ods-input v-model="search.main" prefix-icon="ods-icon-search" placeholder="search" class="filter-item" v-on:input="handleFilters()"></ods-input>
             </div>
             <!-- for new version -->
             <!-- <ods-button-group style="margin: 0 0.2rem">
                <ods-button size="mini" :type="toolBarButtons" :icon="'ods-icon-plus'" :iconPosition="'left'"></ods-button>
                <ods-button size="mini" :type="toolBarButtons" :icon="'ods-icon-edit'" :iconPosition="'left'"></ods-button>
                <ods-button size="mini" :type="toolBarButtons" :icon="'ods-icon-delete'" :iconPosition="'left'"></ods-button>
             </ods-button-group> -->
          </div>
          <div class="table-toolBar_options">
             <ods-button v-if="checkHidden" size="mini" :type="toolBarButtons" @click="dialogOptionsColumnsVisible = true" icon="ods-icon-list"></ods-button>
          </div>
       </div>
       <!-- MAIN TABLE -->
       <ods-table :ref="'table_' + vmid" overflow="show_tip" :data="paginatedData.filter(tableDatafilter)" :height="height" :stripe="stripe" :border="border" :fit="fit" :size="size"
        highlight-current-row style="width: 100%" :tree-props="{children: 'children', hasChildren: 'hasChildren'}" :load="load"  :default-sort="sortColumn" :show-header="header"
        :summary-method="getSummaries" :show-summary="summary"
        @select="handleSelect" @select-all="handleSelectAll" @selection-change="handleSelectionChange" :empty-text="emptyText" :cell-class-name="cellClass" lazy >
          <!-- INDEX, SELECTION AND EXTRA FIELDS COLUMNS -->
          <ods-table-column v-if="checkSelection" type="selection" width="80"></ods-table-column>
          <ods-table-column v-if="checkNumeric" type="index" width="60"></ods-table-column>
          <ods-table-column v-if="checkExtra" type="expand" label="Info." width="80">
             <template v-slot:default="{ row }">
                <p v-for="(item, key) in extraInfo.extra">
                   {{item.extraKey}}:<span> {{ handleExtraValue(row, item.extraField) }}<br></span>
                </p>
             </template>
          </ods-table-column>
          <!-- MAIN COLUMNS -->
          <ods-table-column v-for="(column, index) in columns" :key="index + column.field" :label="column.label ? column.label : column.field" :prop="column.field"  v-if="![column.field].some(x => hiddenColumns.includes(x))"
             :formatter="typeof column.formatter === 'function' ? column.formatter : null"   :width="(column.width == -1 ? null : (column.width + 'px'))" sortable :show-overflow-tooltip="column.ellipsis"
             :header-align="!column.align ? 'left' : column.align"  :align="!column.align ? 'left' : column.align">
             <template v-slot:default="scope" v-if="typeof column.formatter !== 'function'">
                <component v-if="checkFormatter(column.formatter) && !existButtons(column)" :is="column.formatter" :row="scope.row" :info="scope" :data="column" :ncol="index" :column="column.field" :format="column.format">
                   <!-- formatted output from formatter func. -->
                </component>
                <div v-else-if="!checkFormatter(column.formatter) && !existButtons(column)">
                   <span :style="{ 'font-weight': (column.bold ? 'bold' : 'inherit') }">{{ handleCell(scope.row, column) }}</span>
                </div>
                <div v-else-if="!checkFormatter(column.formatter) && existButtons(column)">
                   <ods-button v-for="(btn, index) in column.buttons"
                      :type="btn.btnColor ? btn.btnColor : 'primary'"
                      :icon="btn.btnIcon && btn.btnIcon !== '' ? btn.btnIcon : ''"
                      :icon-position="btn.btnIcon && btn.btnIcon !== '' ? 'left' : null"
                      :size="btn.btnSize !== 'default' ? btn.btnSize : null"
                      :title="btn.btnType === 'icon' ? btn.btnLabel !== 'none' ? btn.btnLabel : btn.btnId : ''"
                      @click="btnInteraction(btn, column.field, scope.row)">
                      {{ (btn.btnLabel !== 'none' && btn.btnType !== 'icon') ? btn.btnLabel : (btn.btnLabel === 'none' && btn.btnType !== 'icon') ? handleCell(scope.row, column) : '' }}
                   </ods-button>
                </div>
             </template>
          </ods-table-column>
       </ods-table>
       <!-- PAGINATION -->
       <ods-pagination :current-page="page" :page-size="pageSize" :page-sizes="pageSizes" :page-count="pageCount" :total="totalItems" @current-change="handlePageChange" @size-change="handlePageSizeChange"></ods-pagination>

       <!-- SHOW/HIDE COLUMNS dialog -->
       <ods-drawer title="Show/Hide Columns" :visible.sync="dialogOptionsColumnsVisible" :append-to-body="false"
          :modal="true" :modal-append-to-body="false" direction="rtl" :show-close="true" :size="'20%'"
          :with-header="true">
          <ods-scrollbar style="height:300px" :wrapStyle="scrollbarWrapStyle" :viewStyle="scrollbarViewStyle">
             <div style="padding: 12px">
                <ol>
                   <li v-for="(column, index) in columns" :key="index" class="li-column">
                      {{ column.label }}: <ods-switch v-model="column.visible"  class="switch-column" @change="toggleColumns($event)">
                      </ods-switch>
                   </li>
                </ol>
             </div>
          </ods-scrollbar>
       </ods-drawer>
    </div>
    <style>


       td:not(:has(button)) {
           padding-top: .25rem !important;
       }
       .ods-pagination__label {
          display: none;
       }

       .table-toolBar {
          display: grid;
          grid-template-columns: 250px 1fr auto;
          justify-content: center;
          column-gap: 0.5rem;
          row-gap: 0.5rem;
          justify-items: normal;
          margin-bottom: 12px;
       }

       .ods-table__expanded-cell {
          background-color: #f3f7ff;
       }

       .ods-table__expanded-cell > p {
          padding: 6px;
          margin-left: 12px;
          margin-bottom: 0px;
          line-height: 16px;
          font-size: .75rem;
          font-weight: 400;
          font-family: Poppins, 'Soho';
       }

       .ods-table__expanded-cell>p>span {
          font-size: .75rem;
          font-weight: 500;
       }

       .ods-table__expanded-cell[class*=cell] {
          padding: 0.50rem;
       }

       ods-button-group {
          margin-right: 6px
       }

       ods-table {
          font-size: 12px !important
       }

       .table-title {
          padding: 0;
          font-size: .80rem;
          font-weight: 500;
          font-style: normal;
          line-height: 1.7rem;
          left: 0;
          text-overflow: ellipsis;
          max-width: 100%;
          white-space: nowrap;
          overflow: hidden;
          font-family: Poppins, Arial
       }

       .ods-button-group>.ods-button {
          float: left;
          position: relative;
       }

       .ods-button-group>.ods-button:first-child {
          border-top-right-radius: 0;
          border-bottom-right-radius: 0;
       }

       .ods-button-group>.ods-button:not(:last-child) {
          margin-right: -1px;
       }

       .ods-button-group .ods-button--primary:last-child {
          border-left-color: rgba(255, 255, 255, .5);
       }

       .ods-button+.ods-button {
          margin-left: 0 !important;
       }

       .ods-button-group .ods-button--primary:first-child {
          border-right-color: rgba(255, 255, 255, .5);
       }

       .ods-button-group>.ods-button+.ods-button {
          margin-left: 0;
       }

       .ods-table__footer-wrapper {
          margin-top: 4px !important;
       }

       .ods-table__footer-wrapper tbody td {
          background-color: #fff;
          font-weight: 600;
       }

       div.more-info>p {
          padding: 4px 4px 4px 0px;
          font-size: 12px;
          font-weight: 500;
       }

       div.more-info>p>span {
          font-weight: 600;
          color: #555
       }

       table td,
       .table th {
          font-size: 12px;
          font-family: 'Poppins', 'Soho';
       }

       .ods-form-item__label {
          margin-bottom: 0.75rem;
       }

       pre {
          overflow: auto;
       }

       pre .string {
          color: #885800;
       }

       pre .number {
          color: blue;
       }

       pre .boolean {
          color: magenta;
       }

       pre .null {
          color: red;
       }

       pre .key {
          color: green;
       }

       .tableTitle {
          float: left;
          font-family: Poppins, "Soho";
          font-weight: 600;
          font-size: 17px;
          margin: 15px 10px 10px 0px;
       }

       .tableFilter {
          float: left;
          margin: 10px 0px 10px 0px;
       }

       .tableShow {
          float: right;
          margin: 10px 0px 10px 0px;
       }


       .ods-table-column--selection .cell {
          padding-left: 1.75rem !important;
          padding-right: 1rem !important;
          display: flex !important;
       }

       .table-toolBar_header {
          display: grid;
          justify-self: left;
          order: 1;
       }

       .table-toolBar_actions {
          display: grid;
          justify-self: right;
          grid-auto-flow: column;
          order: 2;
       }

       .table-toolBar_options {
          display: grid;
          justify-self: right;
          grid-auto-flow: column;
          order: 3;
       }

       .ods-icon-sm {
          font-size: .85rem;
       }

       .li-column {
          margin: 0 0 4px 0;
          border-bottom: 1px dotted #888888;
          line-height: 1rem;
          padding: 6px 0px;
          font-size: 0.75rem;
       }

       .switch-column {
          margin-top: -2px;
          float: right;
       }

       .li-column:last-child {
          border-bottom: none;
       }

       .ods-drawer__header {
          margin-bottom: 1rem;
          padding: 1rem;
          padding-bottom: 0;
       }


       .ods-drawer__header>span {
          font-family: Poppins, 'Soho';
          font-weight: 400;
          font-size: .85rem;
       }
       .filters {
          display: inline-flex;
           flex-direction: row;
           flex-wrap: nowrap;
       }

       div.filters > .ods-select .ods-input__inner:read-only {
          border: none;
       }

       div.filters > .ods-input--prefix > .ods-input__inner {
          border: none;
       }
       .filter-item {
          width: 125px;
          margin: 0 0.3rem;
       }

       .ods-pagination__filters {
          display: -webkit-inline-box;
          display: -ms-inline-flexbox;
          display: inline-flex;
          -webkit-box-align: center;
          -ms-flex-align: center;
          align-items: center;
          height: 100%;
          border-right: 1px solid var(--color-bg-hard-divisor);
          padding: 0 0.5rem;
       }

       .ods-pagination__filters__label {
          font-size: .625rem;
          font-weight: 400;
          font-style: italic;
          line-height: 1rem;
          color: var(--color-txt-secondary);
          padding-left: 0.25rem;
          padding-right: .5rem;
       }

       .hide { display: none; visibility:hidden; }
       .show { display: inline-flex; visibility: visible; }
       div.cell > div.ods-progress--circle .ods-progress__text {
          margin-left: 30px;
          display: inline-flex;
          flex-wrap: nowrap;
          min-width: 40px;
       }
       .datatable-tag {
          height: auto;
          border-radius: 4px;
          width: 60%;
          display: inline-flex;
          justify-content: center;
          align-items: center;
          flex-direction: row;
          flex-wrap: nowrap;
       }
    </style>
templateJS: !html |-
    /**********************************************************************************************
        FORMATTER COMPONENTS FOR CELLS
     **********************************************************************************************/
    const timeStamp = {
       name: 'timeStamp',
       template: `<span><i class="ods-icon-clock ods-icon-sm"></i> {{ dateFormatted }} </span>`,
       props: ["row", "column", "format", "ncol", "info"],
       computed: {
          dateFormatted() {
             var format = this.format || 'DD/MM/YYYY HH:mm:ss'
             return moment(this.row[this.column]).format(format)
          },
          infoT() {
             return 'INFO: ' + this.info + ' - COL:  ' + this.ncol
          }
       }
    };
    const badge = {
       name: 'badge',
       template: `<span>{{ value }} <ods-badge :type="type" :isDot="true"/></span>`,
       props: ["row", "column", "format", "domId"],
       computed: {
          type() {
             var value = typeof this.row[this.column] === 'string' ? Number(this.row[this.column]) : this.row[this.column]
             return value < 0 ? 'info' : value <= 25 ? 'secondary' : value <= 50 ? 'danger' : value <= 75 ? 'warning' : 'success'
          },
          value() { return this.row[this.column] }
       }
    };

    const badgeOK = {
       name: 'badgeOK',
       template: `<span><div data-name="OdsBadge" class="ods-badge"><span :class="'ods-badge__content ods-badge__content--' + type">{{ value }}</span></div></span>`,
       props: ["row", "column", "format", "domId"],
       computed: {
          type() {
             var value = typeof this.row[this.column] === 'string' ? Number(this.row[this.column]) : this.row[this.column]
             return value === 1 ? 'success' : 'danger'
          },
          value() {
             var value = typeof this.row[this.column] === 'string' ? Number(this.row[this.column]) : this.row[this.column]
             return value === 1 ? 'OK' : 'KO'
          }
       }
    };

    // STRING ONLINE/OFFLINE TAGS TO BADGES
    const badgeOnline = {
       name: 'badgeOnline',
       template: `<span><div data-name="OdsBadge" class="ods-badge"><span :class="'ods-badge__content ods-badge__content--' + type">{{ value }}</span></div></span>`,
       props: ["row", "column", "format", "domId"],
       computed: {
          type() {
             var value = this.row[this.column]
             return value.toLowerCase() === 'online' ? 'success' : 'danger'
          },
          value() {
             var value = this.row[this.column]
             return value.toLowerCase() === 'online' ? 'Online' : 'Offline'
          }
       }
    };

    // TAG-VALUE COMPONENT, MAKE A TAG WITH COLOR FOR EACH VALUE DEFINITION (tagDefinition prop)
    const tagValue = {
       name: 'tagValue',
       props: ["row", "column", "data"],
       template: `<div  v-if="data.tagDefinition" class="ods-tag ods-tag--active ods-tag--light datatable-tag"  :style="setStyle">
          <span class="ods-tag__content" style="padding: 4px 8px; margin:0; text-transform: uppercase;">
               {{ label }}
             </span>
       </div>
       <div v-else> {{ this.row[this.column] }}</div>`,
       computed: {
          label() {
             var defaultLabel = ''
             if (!this.data.tagDefinition) {
                return this.row[this.column]
             } else {
                const definition = JSON.parse(this.data.tagDefinition) || []
                if (!Array.isArray(definition)) { return this.row[this.column] }
                defaultLabel = definition.filter(x => x.value === this.row[this.column]).length > 0 ? definition.filter(x => x.value === this.row[this.column])[0].label : this.row[this.column]
                return defaultLabel ? defaultLabel : this.row[this.column]
             }
          },
          setStyle() {
             let defaultColor = 'white'
             let defaultBackground = 'darkgray'
             var background = ''

             const definition = JSON.parse(this.data.tagDefinition) || []
             if (!Array.isArray(definition)) { return {} }

             if (definition.length > 0) {
                background = definition.filter(x => x.value === this.row[this.column]).length > 0 ? definition.filter(x => x.value === this.row[this.column])[0].color : defaultBackground
                return { 'backgroundColor': background, 'color': defaultColor }
             } else {
                return {}
             }
          }
       }
    };

    // TAG-VALUE COMPONENT, MAKE A TAG WITH COLOR FOR EACH VALUE DEFINITION (tagDefinition prop)
    const tagInterval = {
       name: 'tagInterval',
       props: ["row", "column", "data"],
       template: `<div  v-if="data.tagDefinition" class="ods-tag ods-tag--active ods-tag--light datatable-tag"  :style="setStyle">
          <span class="ods-tag__content" style="padding: 4px 8px; margin:0; text-transform: uppercase;">
               {{ label }}
             </span>
       </div>
       <div v-else> {{ this.row[this.column] }}</div>`,
       computed: {
          label() {
             var defaultLabel = ''
             if (!this.data.tagDefinition) {
                return this.row[this.column]
             } else {
                const definition = JSON.parse(this.data.tagDefinition) || []
                if (!Array.isArray(definition)) { return this.row[this.column] }

                if (definition.length > 0) {
                   for (let i = 0; i < definition.length; i++) {
                      let inclusive = definition[i].inclusive
                      let low = parseInt(definition[i].lowValue)
                      let high = parseInt(definition[i].highValue)
                      let value = parseInt(this.row[this.column])
                      let label = definition[i].label
                      if (inclusive) {
                         if ((value >= low) && (value <= high)) {
                            return label ? label : this.row[this.column]
                         }
                      } else {
                         if ((value > low) && (value < high)) {
                            return label ? label : this.row[this.column]
                         }
                      }
                   }
                } else {
                   this.row[this.column]
                }
             }
          },
          setStyle() {
             let defaultColor = 'white'
             let defaultBackground = 'darkgray'
             var background = ''

             const definition = JSON.parse(this.data.tagDefinition) || []
             if (!Array.isArray(definition)) { return {} }

             if (definition.length > 0) {
                for (let i = 0; i < definition.length; i++) {
                   let inclusive = definition[i].inclusive
                   let low = parseInt(definition[i].lowValue)
                   let high = parseInt(definition[i].highValue)
                   let value = parseInt(this.row[this.column])
                   if (inclusive) {
                      if ((value >= low) && (value <= high)) {
                         return { 'backgroundColor': definition[i].color, 'color': defaultColor }
                      }
                   } else {
                      if ((value > low) && (value < high)) {
                         return { 'backgroundColor': definition[i].color, 'color': defaultColor }
                      }
                   }
                }
             } else {
                return {}
             }
          }
       }
    };

    // SCALE COLOR BETWEEN RED AND GREEN, LOWER VALUES ARE RED AND HIGHER VALUES ARE GREEN
    const twoScaleRedGreen = {
       name: 'twoScale-RedGreen',
       template: `<span :style="color"> {{ value }}</span>`,
       props: ["row", "column", "format", "domId"],
       computed: {
          value() {
             return this.row[this.column]
          },
          color() {
             var percent = Number(this.row[this.column])
             return { color: `rgb(${(100 - percent) * 2.56}, ${percent * 2.56}, 0)` }
          }
       }
    }

    // SCALE COLOR BETWEEN GREEN AND RED, LOWER VALUES ARE GREEN AND HIGHER VALUES ARE RED
    const twoScaleGreenRed = {
       name: 'twoScale-GreenRed',
       template: `<span :style="color"> {{ value }}</span>`,
       props: ["row", "column", "format", "domId"],
       computed: {
          value() {
             return this.row[this.column]
          },
          color() {
             var percent = Number(this.row[this.column])
             return { color: `rgb(${percent * 2.56}, ${(100 - percent) * 2.56}, 0)` }
          }
       }
    }

    // PROGRESS LINE FOR A PERCENT DATA CELL
    const cellProgressLine = {
       name: 'cell-ProgressLine',
       template: `<div :style="style">
           <ods-progress :percentage="value" :type="type"  :stroke-width="strokeWidthData" :text-inside="textInside"  :status="status" :color="color" :width="parseInt(width)" :show-text="showText" :rtl="rtl"></ods-progress>
       </div>`,
       props: ["row", "column", "format", "domId"],
       data() {
          return {
             type: 'line',
             status: '',
             strokeWidth: '',
             width: 100,
             textInside: false,
             showText: true,
             accentBlock: false,
             color: '',
             rtl: false,
             strokeWidthData: 6
          }
       },
       computed: {
          value() {
             return this.row[this.column]
          },
          style() {
             return { width: '100%' }
          }
       }
    }

    // PROGRESS CIRCLE FOR A PERCENT DATA CELL
    const cellProgressCircle = {
       name: 'cell-ProgressCircle',
       template: `<ods-progress :percentage="value" :type="type"  :stroke-width="strokeWidthData" :text-inside="textInside"  :status="status" :color="color" :width="parseInt(width)" :show-text="showText" :rtl="rtl"></ods-progress>`,
       props: ["row", "column", "format", "domId"],
       data() {
          return {
             type: 'circle',
             status: '',
             strokeWidth: '',
             width: 24,
             textInside: false,
             showText: true,
             accentBlock: false,
             color: '',
             rtl: false,
             strokeWidthData: 6
          }
       },
       computed: {
          value() {
             return this.row[this.column]
          },
          style() {
             return { width: '100%' }
          }
       }
    }

    /**********************************************************************************************
        END FORMATTER COMPONENTS FOR CELLS
     **********************************************************************************************/


    const vmid = vm.id
    vm.vueconfig = {
       el: document.getElementById(vm.id).querySelector('vuetemplate .gadget-app-table'),
       components: {
          'time-Stamp': timeStamp,
          'badge': badge,
          'badge-Ok': badgeOK,
          'badge-Online': badgeOnline,
          'tag-Value': tagValue,
          'tag-Interval': tagInterval,
          'twoScale-RedGreen': twoScaleRedGreen,
          'twoScale-GreenRed': twoScaleGreenRed,
          'cell-ProgressLine': cellProgressLine,
          'cell-ProgressCircle': cellProgressCircle
       },
       data: {
          ds: [],
          receivedData: null,
          tableData: [],
          search: {
             main: '',
             //device_id: ''
          },
          areFiltersActive: false,
          searchStrategy: 'includes',
          filterPagination: '', // msg to show x of y records showing when filters applied
          totalFiltered: 0,
          showTitle: vm.tparams.parameters.general.showTitle,
          title: vm.tparams.parameters.general.title,
          toolBar: vm.tparams.parameters.general.toolbar,
          header: vm.tparams.parameters.general.header,
          checkNumeric: vm.tparams.parameters.general.numeric,
          checkHidden: vm.tparams.parameters.general.hidden,
          checkSelection: vm.tparams.parameters.general.selector || vm.tparams.parameters.general.interaction.filter,
          multipleSelection: vm.tparams.parameters.general.multipleselection,
          selectedRows: null,
          size: vm.tparams.parameters.general.size,
          checkExtra: vm.tparams.parameters.extraInfo.checkInfo,
          extraDatasource: vm.tparams.parameters.extraDatasource,
          toolBarButtons: 'neutral',
          stripe: vm.tparams.parameters.general.stripe,
          border: vm.tparams.parameters.general.border,
          fit: vm.tparams.parameters.general.fit,
          emptyText: vm.tparams.parameters.general.emptyText,
          GadgetHeight: '85%',
          table: true,
          hidden: [],
          columns: vm.tparams.parameters.columnsdefinition,
          primaryKey: vm.tparams.parameters.general.interaction.primaryKey || null,
          sortColumn: {
             prop: vm.tparams.parameters.general.interaction.sortfield || 0,
             order: vm.tparams.parameters.general.interaction.sortorder || 'descending'
          },
          summary: vm.tparams.parameters.general.interaction.summary,
          summaryText: vm.tparams.parameters.general.interaction.summarytext,
          extraInfo: vm.tparams.parameters.extraInfo,
          interactionFilter: vm.tparams.parameters.general.interaction.filter,
          interactionFilterField: vm.tparams.parameters.general.interaction.filterfield,
          page: 1,
          pageSizes: [
             10,
             20,
             30,
             40,
             50,
             100
          ],
          pageSize: 20,
          minimunPageSize: 10,
          currentPage: 1,
          // dialog for columns
          dialogOptionsColumnsVisible: false,
          scrollbarWrapStyle: { height: '100px', padding: '10px' },
          scrollbarViewStyle: { padding: '12px' }
       },
       methods: {
          drawVueComponent: function (newData, oldData) {
             if (this.extraDatasource && newData) {
                this.ds = [];
                newData.forEach(function (record) {
                   record['hasChildren'] = true
                })
                this.$nextTick(() => {
                   this.ds = newData
                })
             }
             this.page = 1 // when new data always to page 1


          },
          checkFormatter(formatter) {
             if (!formatter) { return false }
             if (formatter && formatter === 'none') { return false } else { return true }
          },
          toggleColumns(field) {
             if (this.hidden.indexOf(field) != -1) {
                this.hidden.splice(this.hiddenColumns.indexOf(field), 1)
             } else {
                this.hidden.push(field)
             }
          },
          cellClass({ row, column, rowIndex, columnIndex }) {
             if (column.property ) {
                if (column.property === this.primaryKey) {
                   return 'pk-' + (row[this.primaryKey] ? row[this.primaryKey] :  this.primaryKey)
                } else {
                   return ''
                }
             } else {
                return ''
             }

          },
          // handle data row for column data in cell
          handleCell: function (row, column) {
             var data = vm.utils.findValues(row, column.field)
             const prefix = column.prefix ? column.prefix : ''
             const postfix = column.postfix ? column.postfix : ''
             if (!(typeof data === 'undefined' || data === null)) {
                return prefix + this.transform(data, column.format) + postfix
             } else {
                return column.noValueText ? column.noValueText : ''
             }
          },
          // check if exist buttons defined or not
          existButtons(column) {
             if (!column.buttons) { return false }
             // section-arrays set one initial element with defautl parameters, so if just only 1 but type is none then no buttons defined, otherwise button are defined.
             if (column.buttons.length > 1) {
                return true
             } else if (column.buttons.length === 1) {
                const btn = column.buttons[0]
                return btn.btnType !== 'none'
             } else {
                return false
             }
          },

          // interaction for button/icon column to sendValue or send Link to other dashboard
          btnInteraction(column, field, row) {
             if (!column) { return false }
             if (column.interaction === 'value') {
                // send Value
                const topic = column.topicType === 'field' ? row[field] : column.topicId

                // check for datalinks created or warning
                const datalinks = __env.dashboardEngineUserRole ? window.DSApi.inst1.api.datalink.interactionHash : angular.element('dashboard').injector().get("interactionService").interactionHash ? angular.element('dashboard').injector().get("interactionService").interactionHash : {}
                if (Object.keys(datalinks).length) {
                   const hasDatalinkCreated = datalinks[vm.id].filter(x => x.emiterField === topic).length > 0
                   if (!hasDatalinkCreated) {
                      console.log('There´s a drawer defined: ', topic, ' but no datalink defined between table and drawer, please define it.')
                      return false;
                   }
                }

                // add btnId to the topicValue
                row.btnTopicId = column.btnId
                const topicValue = JSON.stringify(row)
                console.log('Datatable is Sending value with topic: ', topic, ' Value: ', topicValue)
                vm.sendValue(topic, topicValue)
             } else {
                // send Link
             }
          },

          formatCompactNumber(number) {
             if (isNaN(number)) { return number }
             var locale = (navigator.language).split('-')[0] || 'es'
             const formatter = Intl.NumberFormat(locale, { notation: "compact" })
             return formatter.format(number)
          },

          formatDecimalNumber(number, decimals) {
             if (isNaN(number)) { return number }
             var locale = (navigator.language).split('-')[0] || 'es'
             const formatter = Intl.NumberFormat(locale, { maximumFractionDigits: decimals, minimumFractionDigits: 0 })
             return formatter.format(number)
          },
          // apply transform or format to value inside cell
          transform: function (value, format) {
             switch (format) {
                case 'HH:MM':
                   return Math.floor(value / 3600) + ':' + (Math.floor((value / 60) % 60) + '').padStart(2, '0')
                   break;
                case 'DD/MM/YYYY':
                   return moment() ? moment(value).format('DD/MM/YYYY') : new Date(value).toLocaleDateString('es-ES', { day: '2-digit', month: '2-digit', year: 'numeric' })
                   break;
                case 'DD/MM/YY':
                   return moment() ? moment(value).format('DD/MM/YY') : new Date(value).toLocaleDateString('es-ES', { day: '2-digit', month: '2-digit', year: '2-digit' })
                   break;
                case 'DD/MM/YYYY HH:mm':
                   return moment() ? moment(value).format('DD/MM/YYYY HH:mm') : new Date(value).toLocaleDateString('es-ES', { hour12: true, day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' })
                   break;
                case 'DD/MM/YY HH:mm':
                   return moment() ? moment(value).format('DD/MM/YY HH:mm') : new Date(value).toLocaleDateString('es-ES', { hour12: true, day: '2-digit', month: '2-digit', year: '2-digit', hour: '2-digit', minute: '2-digit' })
                   break;
                case 'DD/MM/YYYY HH:mm:ss':
                   return moment() ? moment(value).format('DD/MM/YYYY HH:mm:ss') : new Date(value).toLocaleDateString('es-ES', { hour12: true, day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit' })
                   break;
                case 'DD/MM/YY HH:mm:ss':
                   return moment() ? moment(value).format('DD/MM/YY HH:mm:ss') : new Date(value).toLocaleDateString('es-ES', { hour12: true, day: '2-digit', month: '2-digit', year: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit' })
                   break;
                case 'MM/DD/YYYY':
                   return moment() ? moment(value).format('MM/DD/YYYY') : new Date(value).toLocaleDateString('en-US', { day: '2-digit', month: '2-digit', year: 'numeric' })
                   break;
                case 'MM/DD/YYYY HH':
                   return moment() ? moment(value).format('MM/DD/YYYY') : new Date(value).toLocaleDateString('en-US', { hour12: true, day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit' })
                   break;
                case 'MM/DD/YYYY HH:mm':
                   return moment() ? moment(value).format('MM/DD/YY HH:mm') : new Date(value).toLocaleDateString('en-US', { hour12: true, day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' })
                   break;
                case 'MM/DD/YYYY HH:mm:ss':
                   return moment() ? moment(value).format('MM/DD/YY HH:mm:ss') : new Date(value).toLocaleDateString('en-US', { hour12: true, day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit' })
                   break;
                case 'MM/DD/YY':
                   return moment() ? moment(value).format('MM/DD/YY') : new Date(value).toLocaleDateString('en-US', { day: '2-digit', month: '2-digit', year: '2-digit' })
                   break;
                case 'MM/DD/YY HH':
                   return moment() ? moment(value).format('MM/DD/YY HH') : new Date(value).toLocaleDateString('en-US', { hour12: true, day: '2-digit', month: '2-digit', year: '2-digit', hour: '2-digit' })
                   break;
                case 'MM/DD/YY HH:mm':
                   return moment() ? moment(value).format('MM/DD/YY HH:mm') : new Date(value).toLocaleDateString('en-US', { hour12: true, day: '2-digit', month: '2-digit', year: '2-digit', hour: '2-digit', minute: '2-digit' })
                   break;
                case 'MM/DD/YY HH:mm:ss':
                   return moment() ? moment(value).format('MM/DD/YY HH:mm:ss') : new Date(value).toLocaleDateString('en-US', { hour12: true, day: '2-digit', month: '2-digit', year: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit' })
                   break;
                case 'YYYY':
                   return moment() ? moment(value).format('YYYY') : new Date(value).toLocaleDateString('es-ES', { year: 'numeric' })
                   break;
                case 'OK/KO':
                   return value == 1 ? 'OK' : 'KO'
                   break;
                case 'Online/Offline':
                   return value === 1 ? 'Online' : 'Offline'
                   break;
                case 'ON/OFF':
                   return value == 1 ? 'ON' : 'OFF'
                   break;
                case 'YES/NO':
                   return value == 1 ? 'YES' : 'NO'
                   break;
                case 'Compact':
                   return this.formatCompactNumber(value)
                   break;
                case 'Decimal 2':
                   return this.formatDecimalNumber(value, 2)
                   break;
                case 'Decimal 3':
                   return this.formatDecimalNumber(value, 3)
                   break;
                default:
                   return value;
             }
          },
          resizeEvent: function () {
             //Resize event
          },
          destroyVueComponent: function () {
             vm.vueapp.$destroy();
          },
          receiveValue: function (data) {
             //data received from datalink
          },
          sendValue: vm.sendValue,
          sendFilter: vm.sendFilter,
          // send filter from table
          sendRowFilter: function (rows) {
             var that = this
             var op = this.multipleSelection ? 'IN' : '='
             var filterValues = ''
             const isStringsArray = arr => arr.every(i => typeof i === "string")
             const isNumbersArray = arr => arr.every(i => typeof i === "number")

             if (!this.interactionFilter) { return false }
             if (rows.length === 0 || rows.length === this.totalRecords.length) {
                // send default value.
                vm.sendFilter(this.interactionFilterField, null, op)
             } else {
                // send value/s
                // single-selection
                if (!this.multipleSelection) {
                   filterValues = rows[0][this.interactionFilterField]
                   vm.sendFilter(this.interactionFilterField, filterValues, op)
                } else {
                   // multiple-selection
                   var values = rows.map(x => x[this.interactionFilterField])
                   filterValues = "(" + (isNumbersArray(values) ? values.join(',') : values.map(x => "'" + x + "'").join(',')) + ")"
                   vm.sendFilter(this.interactionFilterField, filterValues, op)
                }
             }
             // to-do: vm.sendValue...
          },
          handleSizeChange(val) {
             this.pageSize = val
          },
          handleCurrentChange(val) {
             this.page = val
          },
          load(tree, treeNode, resolve) {
             var filterValue = tree[config.extraDatasourceFilterField]
             if (typeof filterValue == 'string') {
                filterValue = "'" + filterValue + "'"
             }
             vm.from(config.extraDatasource)
                .filter(vm.utils.datastatusToFilter(vm.datastatus))
                .filter(config.extraDatasourceFilterField, filterValue)
                .exec()
                .then(resolve)
          },
          handlePageChange(page) {
             this.page = page
          },
          handlePageSizeChange(pageSize) {
             this.pageSize = pageSize
             this.handlePageChange(this.page)
          },
          handleFilters() {
             const isEmptyObject = (obj) => { return !Object.values(obj).some(x => x !== null && x !== '') }
             this.areFiltersActive = !isEmptyObject(this.search)
          },
          tableDatafilter: function (element, index) {
             var that = this
             var founded = false
             if (!this.areFiltersActive) { return true }
             // main search iterate and tyr to find this value in some data of row
             if (this.search.main !== '') {
                let search = this.search.main.toLowerCase()
                for (let i = 0; i < this.tableColumns.length; i++) {
                   let columnValue = vm.utils.findValues(element, this.tableColumns[i])
                   columnValue = columnValue.toString().toLowerCase()
                   if (columnValue.includes(search)) {
                      founded = true
                      break
                   }
                }
                return founded
             } else {
                // iterate in other filters
                var filters = Object.keys(this.search)
                for (let i = 0; i < filters.length; i++) {
                   if (filters[i] === 'main') { continue }
                   const search = this.search[filters[i]].toString().toLowerCase()
                   if (search) {
                      let columnValue = vm.utils.findValues(element, filters[i])
                      columnValue = columnValue.toString().toLowerCase()
                      if (columnValue === search) {
                         founded = true
                      }
                   }
                }
                return founded
             }
          },
          showSelectionColumn: function () {
             if (config.general.selector) {
                return true;
             }
          },
          // control for multiple selection or single.
          handleSelectionChange(rows) {
             var avoided = false
             var ref = 'table_' + vmid
             if (!this.multipleSelection) {
                // single-selection avoid +1 selection, keep last selected
                if (rows.length > 1) {
                   this.$refs[ref].clearSelection()
                   this.selectedRows = rows.pop()
                   avoided = true
                   this.$refs[ref].toggleRowSelection(this.selectedRows)
                }
             }
             if (!avoided) { this.selectedRows = rows }
          },

          // get selection (multiple or single and send filter if its configured)
          handleSelect(selection, row) {
             if (this.interactionFilter) {
                this.sendRowFilter(this.selectedRows)
             }
          },

          // get selection All check for all elements, when null
          handleSelectAll(selection) {
             if (this.interactionFilter) {
                this.sendRowFilter(this.selectedRows)
             }
          },

          // handle extra field value, it can be single or nested field.
          handleExtraValue(row, field) {
             if (field && field.includes('.')) {
                var arr = field.split(".")
                var value = row[arr[0]][arr[1]]
                return value
             } else {
                return row[field]
             }
          },
          // sum number columns if summary
          getSummaries(param) {
             const { columns, data } = param;
             const sums = [];
             columns.forEach((column, index) => {
                if (index === 0) {
                   sums[index] = 'Total';
                   return;
                }
                const values = data.map(item => Number(item[column.property]))
                if (!values.every(value => isNaN(value))) {
                   sums[index] = values.reduce((prev, curr) => {
                      const value = Number(curr)
                      if (!isNaN(value)) {
                         return prev + curr
                      } else {
                         return prev
                      }
                   }, 0)
                } else {
                   sums[index] = ''
                }
             });

             return sums;
          },

          // summary row calculation
          getSummaries(param) {
             var that = this
             const { columns, data } = param;
             const sums = [];
             columns.forEach((column, index) => {
                if (index === 0) {
                   sums[index] = that.summaryText;
                   return;
                }
                const values = data.map(item => Number(item[column.property]))
                if (!values.every(value => isNaN(value))) {
                   sums[index] = values.reduce((prev, curr) => {
                      const value = Number(curr)
                      if (!isNaN(value)) {
                         return prev + curr
                      } else {
                         return prev
                      }
                   }, 0)
                } else {
                   sums[index] = ''
                }
             });

             return sums;
          },
          // adjust heigth on table after gadget is loaded.
          loaded() {
             var gadget = document.getElementById(vm.id).querySelector('vuetemplate')
             var corrector = this.toolBar ? 100 : 65

             if (gadget.clientHeight <= 0 || !gadget) { this.GadgetHeight = '85%'; return false }
             var elemHeight = gadget.clientHeight
             this.table = false
             setTimeout(() => { this.GadgetHeight = elemHeight - corrector + 'px'; this.table = true }, 100)
          },
          // adjust table to gadget new height and back
          fullSize(mutationList, observer) {
             var app = this
             var gadget = this.$el
             var changed = false
             var lastClass = ''
             mutationList.forEach(function (mutation) {
                if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                   // handle class change
                   changed = true
                   lastClass = mutation.target.className.split(' ').pop()
                   sessionStorage.setItem('maximized', lastClass)
                }
             })
             // hack to restore width after maximize on complex grid layout
             if (sessionStorage.getItem('maximized') === 'animate-show-hide' || sessionStorage.getItem('maximized') === 'widget-maximize') {
                this.loaded()
                this.table = false
                setTimeout(() => { this.table = true }, 250)
             }
          },
          // RECEIVE VALUE FROM OTHER GADGET, DEFAULT CALL FROM OTHER GADGETS
          receiveValue: function (data) {
             if ( data && vm.tparams.parameters.general.interaction.datalinkID ){
                if (data.topic === vm.tparams.parameters.general.interaction.datalinkID) {
                   this.receivedData = JSON.parse(data.value) || null
                   console.log('RECEIVED DATA: ', this.receivedData)
                   // get the element with idField and set value with valueField and setting up value
                   if (this.ds.filter(x => x[this.primaryKey] ===  this.receivedData[this.receivedData.idField]).length > 0){
                      let record = this.ds.filter(x => x[this.primaryKey] ===  this.receivedData[this.receivedData.idField])[0]
                      this.$set(record, this.receivedData.valueField, this.receivedData.newValue)
                      // mark row in table
                      this.$nextTick(() => {
                         let row = document.querySelector('.pk-' + this.receivedData[this.receivedData.idField]).closest('tr')
                         row.classList.remove('current-row')
                         row.style.transition = "background-color 1000ms linear"
                         row.style.backgroundColor = "#bff7d2"
                         setTimeout(() => { row.style.backgroundColor = 'transparent' }, 3000)
                      })

                   }
                } else {
                   this.receivedData = null
                }
             }
          },
       },
       computed: {
          gadgetHeight() {
             return (this.$el && this.$el.clientHeight > 0) ? this.$el.clientHeight : ''
          },
          height() {
             return this.GadgetHeight || '85%'
          },
          tableColumns() {
             return this.columns.map(x => x.field)
          },

          hiddenColumns() {
             return this.columns.filter(x => x.visible === false).map(y => y.field)
          },
          defaultSort() {
             if (this.tableColumns.length === 0) { return {} }
             if (this.sortColumn.field === '') { return { prop: this.tableColumns[0], order: 'descending' } }
             return { prop: this.sortColumn.field, order: this.sortColumn.order }
          },
          pageSizes() {
             return [
                this.minimumPageSize,
                this.minimumPageSize * 2,
                this.minimumPageSize * 3,
                this.minimumPageSize * 4,
                this.minimumPageSize * 5,
                this.minimumPageSize * 10
             ]
          },
          totalItems() {
             return this.filteredData.length
          },
          filteredData() {
             this.totalFiltered = this.ds.filter(this.tableDatafilter).length
             return this.ds.filter(this.tableDatafilter)

          },
          pageCount() {
             return Math.floor(this.totalItems / this.pageSize)
          },
          paginatedData() {
             return this.filteredData.slice(this.pageSize * this.page - this.pageSize, this.pageSize * this.page)
          },
          totalRecords: function () {
             return this.ds.length
          },
       },
       watch: {
          gadgetHeight: function (newClass, oldClass) {
             console.log('WATCHING GADGET HEIGHT: ', newClass, oldClass)
          }
       },
       created() {
          this.vmid = vmid || this.$el
       },
       mounted() {
          var that = this
          var gadget = this.$el

          // OBSERVE CLASS CHANGE ON GRIDSTER-ITEM TO MAXIMIZE (adjust table on fullscreen go and back)
          const template = document.getElementById(vm.id).querySelector('vuetemplate .gadget-app-table').closest('gridster-item') || null
          if (template) {
             const options = {
                attributes: true
             }
             const observer = new MutationObserver(that.fullSize)
             observer.observe(template, options)
          }

          this.$nextTick(() => {
             window.addEventListener('resize', this.loaded)
             setTimeout(() => { this.loaded() }, 150) // first loading
          })
       },
       destroyed() {
          window.removeEventListener("resize", this.loaded)
       },
       //For Pagination
       i18n: (window.i18n ? window.i18n : (new VueI18n({ locale: 'EN', fallbackLocale: 'EN', messages: { default: "EN", languages: { "EN": {} } } })))

    }

    //Init Vue app
    vm.vueapp = new Vue(vm.vueconfig);
headerlibs: !html ""
config:
    gform:
    -   id: 8
        type: section
        elements:
        -   id: 1
            type: input-text
            name: title
            default: My Table
            title: Title
        -   id: 4
            type: checkbox
            name: toolbar
            default: true
            title: ToolBar
        -   id: 4
            type: checkbox
            name: hidden
            default: true
            title: ' Show/Hide'
            desc: Enable Show/Hide Columns
        -   id: 4
            type: checkbox
            name: numeric
            default: false
            title: Index
            desc: Enable Index Column
        -   id: 4
            type: checkbox
            name: selector
            default: true
            title: Selection
            desc: Enable Selection Column
        -   id: 4
            type: checkbox
            name: multipleselection
            default: false
            title: Multiple
            desc: Select to multiple row selection or single selection.
        -   id: 4
            type: checkbox
            name: stripe
            default: false
            title: Stripe
            desc: Stripe  background for rows
        -   id: 4
            type: checkbox
            name: border
            default: false
            title: Border
            desc: Enable Table border
        -   id: 4
            type: checkbox
            name: fit
            default: true
            title: Fit Data
            desc: 'adjust to 100% width Table '
        -   id: 4
            type: checkbox
            name: header
            default: true
            title: Header
            desc: Enable Header
        -   id: 3
            type: selector
            name: size
            options:
            -   value: default
                text: DEFAULT
            -   value: medium
                text: MEDIUM
            -   value: small
                text: SMALL
            -   value: mini
                text: MINI
            title: Table Size
            default: default
        -   id: 1
            type: input-text
            name: emptyText
            default: No Data
            title: No Data
            desc: Label to show when no data is retrived
        -   id: 8
            type: section
            elements:
            -   id: 1
                type: input-text
                name: datalinkID
                default: ''
                title: Datalink ID
                desc: an Unique ID to use to send values to the table from other gadgets.
                    Useful to update the table from drawers.
            -   id: 6
                type: ds-field
                name: primaryKey
                title: Primary Key
                desc: Field to use as primary Key, used for interaction and updates
                    from other components
            -   id: 6
                type: ds-field
                name: sortfield
                title: Sort Field
            -   id: 3
                type: selector
                name: sortorder
                options:
                -   value: ascending
                    text: ASC
                -   value: descending
                    text: DESC
                title: Sort order
                default: descending
            -   id: 4
                type: checkbox
                name: summary
                default: false
                title: Summary
                desc: Enable and add summary row for numerical columns
            -   id: 1
                type: input-text
                name: summarytext
                default: Total
                title: Sum Text
            -   id: 4
                type: checkbox
                name: filter
                default: false
                title: Filter
                desc: 'Enable Filter other gadgets '
            -   id: 6
                type: ds-field
                name: filterfield
                title: Filter Field
                desc: The field to send in filter
            name: interaction
            title: Interaction
        name: general
        title: General Options
    -   id: 9
        type: section-array
        elements:
        -   id: 1
            type: input-text
            name: label
            default: ''
            title: Column Label
        -   id: 6
            type: ds-field
            name: field
            title: Column Field
        -   id: 4
            type: checkbox
            name: visible
            default: true
            title: Visible
        -   id: 3
            type: selector
            name: align
            options:
            -   value: left
                text: LEFT
            -   value: center
                text: CENTER
            -   value: right
                text: RIGHT
            title: Align
            default: left
        -   id: 4
            type: checkbox
            name: ellipsis
            default: false
            title: Ellipsis
        -   id: 3
            type: selector
            name: formatter
            options:
            -   value: time-Stamp
                text: TimeStamp
            -   value: none
                text: None
            -   value: badge
                text: Badge
            -   value: badge-Ok
                text: Badge OK/KO
            -   value: twoScale-RedGreen
                text: 2 Scale Red to Green
            -   value: twoScale-GreenRed
                text: 2 Scale Green to Red
            -   value: cell-ProgressLine
                text: Progress Line
            -   value: cell-ProgressCircle
                text: Progress Circle
            -   value: badge-Online
                text: Badge Online/Offline
            -   value: tag-Value
                text: Tag Value
            -   value: tag-Interval
                text: Tag Interval
            title: Formatter
            default: none
        -   id: 1
            type: input-text
            name: tagDefinition
            default: ''
            title: Tag Definition
            desc: Only when formatter is tag-value or tag-interval, it uses to set
                definition for tag behaviour.
        -   id: 3
            type: selector
            name: format
            options:
            -   value: none
                text: ''
            -   value: DD/MM/YYYY
                text: DD/MM/YYYY
            -   value: DD/MM/YYYY HH:mm
                text: DD/MM/YYYY HH:mm
            -   value: DD/MM/YYYY HH:mm:ss
                text: DD/MM/YYYY HH:mm:ss
            -   value: HH:mm
                text: HH:mm
            -   value: DD/MM/YY
                text: DD/MM/YY
            -   value: MM/DD/YYYY
                text: MM/DD/YYYY
            -   value: MM/DD/YY
                text: MM/DD/YY
            -   value: MM/DD/YYYY HH:mm
                text: MM/DD/YYYY HH:mm
            -   value: MM/DD/YY HH:mm
                text: MM/DD/YY HH:mm
            -   value: MM/DD/YYYY HH:mm:ss
                text: MM/DD/YYYY HH:mm:ss
            -   value: MM/DD/YY HH:mm:ss
                text: MM/DD/YY HH:mm:ss
            -   value: Compact
                text: Compact (Number K,M,B)
            -   value: Decimal 2
                text: Decimal 2
            -   value: Decimal 3
                text: Decimal 3
            -   value: YYYY
                text: YYYY
            title: Format
            default: none
            desc: Apply format or use with formatter as parameter
        -   id: 1
            type: input-text
            name: prefix
            default: ''
            title: Prefix
        -   id: 1
            type: input-text
            name: postfix
            default: ''
            title: Postfix
        -   id: 4
            type: checkbox
            name: bold
            default: false
            title: Bold
        -   id: 5
            type: color-picker
            name: color
            default: rgba(0, 0, 0, 1)
            title: Color
        -   id: 2
            type: input-number
            name: width
            default: '-1'
            title: Width (px)
            max: ''
            min: '-1'
        -   id: 1
            type: input-text
            name: noValueText
            default: '-'
            title: No value text
        -   id: 8
            type: section-array
            elements:
            -   id: 1
                type: input-text
                name: btnId
                default: id
                title: Button Id
                desc: the id is a unique identifier that will be send into the row
                    info
                required: true
            -   id: 2
                type: input-text
                name: btnLabel
                default: none
                title: Button Label
                desc: if label its empty (none) and you select a field, then the value
                    of this field is the label, otherwise, if you fill label , then
                    label is static for the button
            -   id: 3
                type: selector
                name: btnColor
                options:
                -   value: primary
                    text: Primary
                -   value: secondary
                    text: Secondary
                -   value: neutral
                    text: Neutral
                -   value: destructive
                    text: Danger
                title: Button Color
                desc: ''
                default: primary
            -   id: 3
                type: selector
                name: btnType
                options:
                -   value: button
                    text: Button
                -   value: icon
                    text: Icon
                -   value: none
                    text: None
                title: Button Type
                desc: create a button o just an icon
                default: none
                required: true
            -   id: 3
                type: selector
                name: btnSize
                options:
                -   value: default
                    text: Default
                -   value: small
                    text: Small
                title: Button Size
                default: default
            -   id: 1
                type: input-text
                name: btnIcon
                default: ''
                title: Icon
                desc: Icon for button or icon only if type is icon, all icons start
                    with ods-icon-
            -   id: 3
                type: selector
                name: interaction
                options:
                -   value: value
                    text: Value
                -   value: link
                    text: Link
                title: Interaction
                desc: Two Actions, Send a Value to other gadget or create a link to
                    another Dashboard
                default: value
                required: true
            -   id: 3
                type: selector
                name: topicType
                options:
                -   value: field
                    text: FIELD
                -   value: static
                    text: STATIC
                title: Topic Type
                desc: Only in value interaction, indicates if we use the value of
                    the field as topic or you want to set an static one
                default: field
                required: true
            -   id: 1
                type: input-text
                name: topicId
                default: ''
                title: Topic  ID
                desc: Fill only when interaction is Value and type is Static, then
                    Topic ID is the topic we want to send to other gadget.
            name: buttons
            title: Buttom Column
            desc: Create a column with \\n buttons with actions
        name: columnsdefinition
        title: Columns Definition
    -   id: 8
        type: section
        elements:
        -   id: 4
            type: checkbox
            name: checkInfo
            default: false
            title: Enable Extra
            desc: Enable extra expandable row with more columns
        -   id: 9
            type: section-array
            elements:
            -   id: 1
                type: input-text
                name: extraKey
                default: ''
                title: Name
            -   id: 6
                type: ds-field
                name: extraField
                title: Value
            name: extra
            title: Information
        name: extraInfo
        title: Extra Information
public: true
